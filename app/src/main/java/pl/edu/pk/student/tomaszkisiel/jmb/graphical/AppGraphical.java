/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pl.edu.pk.student.tomaszkisiel.jmb.graphical;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import pl.edu.pk.student.tomaszkisiel.jmb.JmbClient;
import pl.edu.pk.student.tomaszkisiel.jmb.JmbServer;
import pl.edu.pk.student.tomaszkisiel.jmb.storage.InMemoryStorage;
import pl.edu.pk.student.tomaszkisiel.jmb.storage.JmbStorage;
import pl.edu.pk.student.tomaszkisiel.jmb.storage.RedisStorage;
import pl.edu.pk.student.tomaszkisiel.jmb.transporters.Topic;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.time.Duration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class AppGraphical extends Application {
    private final Logger logger = LoggerFactory.getLogger(AppGraphical.class);
    private final ExecutorService executor = Executors.newFixedThreadPool(1000);
    private JmbServer jmbServer;
    private JmbClient jmbClient;
    private TextArea logs;
    private Tab serverTab;
    private Tab clientTab;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage stage) throws Exception {
        setupLogs();

        Tab serverTab = buildServerTab();
        Tab clientTab = buildClientTab();

        TabPane tabPane = new TabPane();
        tabPane.getTabs().addAll(serverTab, clientTab);

        Scene scene = new Scene(tabPane, 600, 400);
        stage.setScene(scene);
        stage.setTitle("JMB Graphical");
        stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
            @Override
            public void handle(WindowEvent t) {
                Platform.exit();
                System.exit(0);
            }
        });
        stage.show();
    }

    public Tab buildServerTab() {
        TextArea textAreaOfLogs = new TextArea();
        textAreaOfLogs.setEditable(false);

        TextField fieldOfServerPort = new TextField();
        TextField fieldOfStorageCapacity = new TextField();
        TextField fieldOfStorageTTL = new TextField();
        TextField fieldOfRedisHost = new TextField();

        fieldOfServerPort.textProperty().addListener(new NumericGuard(fieldOfServerPort));
        fieldOfStorageCapacity.textProperty().addListener(new NumericGuard(fieldOfStorageCapacity));
        fieldOfStorageTTL.textProperty().addListener(new NumericGuard(fieldOfStorageTTL));

        fieldOfServerPort.setText("5623");
        fieldOfStorageCapacity.setText("1000");
        fieldOfStorageTTL.setText("15");
        fieldOfRedisHost.setText("redis://localhost:6379");

        Label labelOfServerPort = new Label("Server Port:");
        Label labelOfStorageType = new Label("Storage Type:");
        Label labelOfRedisHost = new Label("Redis Host:");
        Label labelOfStorageCapacity = new Label("Storage Capacity:");
        Label labelOfStorageTTL = new Label("Storage TTL (minutes):");
        Label labelOfLogs = new Label("Logs:");

        ComboBox<String> selectOfStorageType = new ComboBox<>();
        selectOfStorageType.getItems().addAll("in-memory", "redis");
        selectOfStorageType.setOnAction(event -> {
            if (selectOfStorageType.getValue().equals("redis")) {
                labelOfRedisHost.setVisible(true);
                fieldOfRedisHost.setVisible(true);
            } else {
                labelOfRedisHost.setVisible(false);
                fieldOfRedisHost.setVisible(false);
            }
        });
        selectOfStorageType.setValue("redis");

        Button buttonOfStart = new Button("Start Server");
        Button buttonOfStop = new Button("Stop Server");

        buttonOfStart.setOnMouseClicked(event -> {
            JmbStorage storage = selectOfStorageType.getValue().equals("redis")
                    ? new RedisStorage(fieldOfRedisHost.getText(), Duration.ofMinutes(Long.parseUnsignedLong(fieldOfStorageTTL.getText())), Integer.parseUnsignedInt(fieldOfStorageCapacity.getText()))
                    : new InMemoryStorage(Duration.ofMinutes(Long.parseUnsignedLong(fieldOfStorageTTL.getText())), Integer.parseUnsignedInt(fieldOfStorageCapacity.getText()));

            jmbServer = new JmbServer();
            jmbServer.setStorage(storage);
            executor.submit(() -> jmbServer.run(Integer.parseUnsignedInt(fieldOfServerPort.getText())));

            fieldOfServerPort.setDisable(true);
            fieldOfStorageCapacity.setDisable(true);
            fieldOfStorageTTL.setDisable(true);
            fieldOfRedisHost.setDisable(true);
            selectOfStorageType.setDisable(true);
            labelOfStorageType.setDisable(true);
            labelOfRedisHost.setDisable(true);
            labelOfStorageCapacity.setDisable(true);
            labelOfStorageTTL.setDisable(true);
            buttonOfStart.setDisable(true);
            buttonOfStop.setDisable(false);
            clientTab.setDisable(true);
        });

        buttonOfStop.setOnMouseClicked(event -> {
            jmbServer.terminate();

            fieldOfServerPort.setDisable(false);
            fieldOfStorageCapacity.setDisable(false);
            fieldOfStorageTTL.setDisable(false);
            fieldOfRedisHost.setDisable(false);
            selectOfStorageType.setDisable(false);
            labelOfStorageType.setDisable(false);
            labelOfRedisHost.setDisable(false);
            labelOfStorageCapacity.setDisable(false);
            labelOfStorageTTL.setDisable(false);
            buttonOfStart.setDisable(false);
            buttonOfStop.setDisable(true);
            clientTab.setDisable(false);
        });

        VBox boxOfStorageType = new VBox(labelOfStorageType, selectOfStorageType);
        VBox boxOfRedisHost = new VBox(labelOfRedisHost, fieldOfRedisHost);

        HBox boxOfStorage = new HBox(boxOfStorageType, boxOfRedisHost);
        boxOfStorage.setSpacing(8);

        HBox.setHgrow(boxOfStorageType, Priority.ALWAYS);
        HBox.setHgrow(boxOfRedisHost, Priority.ALWAYS);

        buttonOfStop.setDisable(true);

        VBox content = new VBox();
        content.setSpacing(8);
        content.getChildren().addAll(
                new VBox(labelOfServerPort, fieldOfServerPort),
                new HBox(buttonOfStart, buttonOfStop),
                boxOfStorage,
                new VBox(labelOfStorageTTL, fieldOfStorageTTL),
                new VBox(labelOfStorageCapacity, fieldOfStorageCapacity),
                new VBox(labelOfLogs, textAreaOfLogs)
        );

        serverTab = new Tab("Server");
        serverTab.setClosable(false);
        serverTab.setContent(content);
        serverTab.setOnSelectionChanged(event -> {
            if (serverTab.isSelected()) logs = textAreaOfLogs;
        });

        return serverTab;
    }

    public Tab buildClientTab() {
        TextField fieldOfServerHost = new TextField();
        TextField fieldOfServerPort = new TextField();
        TextField fieldOfManagementTopic = new TextField();
        TextField fieldOfMessageTopic = new TextField();
        TextField fieldOfMessagePayload = new TextField();

        fieldOfServerPort.textProperty().addListener(new NumericGuard(fieldOfServerPort));

        fieldOfServerHost.setText("localhost");
        fieldOfServerPort.setText("5623");

        Label labelOfServerHost = new Label("Server Host:");
        Label labelOfServerPost = new Label("Server Post:");
        Label labelOfManagementTopic = new Label("Topic:");
        Label labelOfMessagePayload = new Label("Payload:");
        Label labelOfMessageTopic = new Label("Topic:");
        Label labelOfLogs = new Label("Logs:");

        Button buttonOfConnect = new Button("Connect");
        Button buttonOfDisconnect = new Button("Disconnect");
        Button buttonOfSubscribe = new Button("Subscribe");
        Button buttonOfUnsubscribe = new Button("Unsubscribe");
        Button buttonOfFetch = new Button("Fetch");
        Button buttonOfPublish = new Button("Publish");

        TextArea textAreaOfLogs = new TextArea();
        textAreaOfLogs.setEditable(false);

        buttonOfConnect.setOnMouseClicked(event -> {
            try {
                jmbClient = new JmbClient(fieldOfServerHost.getText(), Integer.parseUnsignedInt(fieldOfServerPort.getText()));
                jmbClient.consume(topic -> {
                    logger.info(String.format("Received topic '%s' with payload: '%s'", topic.getTopic(), topic.getPayload()));
                });
                jmbClient.start();

                fieldOfServerHost.setDisable(true);
                fieldOfServerPort.setDisable(true);
                fieldOfServerHost.setDisable(true);
                fieldOfServerPort.setDisable(true);
                fieldOfManagementTopic.setDisable(false);
                fieldOfMessageTopic.setDisable(false);
                fieldOfMessagePayload.setDisable(false);
                labelOfManagementTopic.setDisable(false);
                labelOfMessagePayload.setDisable(false);
                labelOfMessageTopic.setDisable(false);
                buttonOfConnect.setDisable(true);
                buttonOfDisconnect.setDisable(false);
                buttonOfSubscribe.setDisable(false);
                buttonOfUnsubscribe.setDisable(false);
                buttonOfFetch.setDisable(false);
                buttonOfPublish.setDisable(false);
                serverTab.setDisable(true);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        buttonOfDisconnect.setOnMouseClicked(event -> {
            jmbClient.terminate();

            fieldOfServerHost.setDisable(false);
            fieldOfServerPort.setDisable(false);
            fieldOfServerHost.setDisable(false);
            fieldOfServerPort.setDisable(false);
            fieldOfManagementTopic.setDisable(true);
            fieldOfMessageTopic.setDisable(true);
            fieldOfMessagePayload.setDisable(true);
            labelOfManagementTopic.setDisable(true);
            labelOfMessagePayload.setDisable(true);
            labelOfMessageTopic.setDisable(true);
            buttonOfConnect.setDisable(false);
            buttonOfDisconnect.setDisable(true);
            buttonOfSubscribe.setDisable(true);
            buttonOfUnsubscribe.setDisable(true);
            buttonOfFetch.setDisable(true);
            buttonOfPublish.setDisable(true);
            serverTab.setDisable(false);
        });

        buttonOfSubscribe.setOnMouseClicked(event -> {
            try {
                jmbClient.subscribe(fieldOfManagementTopic.getText());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        buttonOfUnsubscribe.setOnMouseClicked(event -> {
            try {
                jmbClient.unsubscribe(fieldOfManagementTopic.getText());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        buttonOfFetch.setOnMouseClicked(event -> {
            try {
                jmbClient.fetch(fieldOfManagementTopic.getText());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        buttonOfPublish.setOnMouseClicked(event -> {
            try {
                jmbClient.publish(new Topic<>(fieldOfMessageTopic.getText(), fieldOfMessagePayload.getText()));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });

        VBox boxOfMessageTopic = new VBox(labelOfMessageTopic, fieldOfMessageTopic);
        VBox boxOfMessagePayload = new VBox(labelOfMessagePayload, fieldOfMessagePayload);

        HBox boxOfMessage = new HBox(boxOfMessageTopic, boxOfMessagePayload);
        boxOfMessage.setSpacing(8);

        HBox.setHgrow(boxOfMessageTopic, Priority.ALWAYS);
        HBox.setHgrow(boxOfMessagePayload, Priority.ALWAYS);

        VBox boxOfServerHost = new VBox(labelOfServerHost, fieldOfServerHost);
        VBox boxOfServerPort = new VBox(labelOfServerPost, fieldOfServerPort);

        HBox boxOfServer = new HBox(boxOfServerHost, boxOfServerPort);
        boxOfServer.setSpacing(8);

        HBox.setHgrow(boxOfServerHost, Priority.ALWAYS);
        HBox.setHgrow(boxOfServerPort, Priority.ALWAYS);

        labelOfManagementTopic.setDisable(true);
        labelOfMessagePayload.setDisable(true);
        labelOfMessageTopic.setDisable(true);
        fieldOfManagementTopic.setDisable(true);
        fieldOfMessageTopic.setDisable(true);
        fieldOfMessagePayload.setDisable(true);
        buttonOfDisconnect.setDisable(true);
        buttonOfSubscribe.setDisable(true);
        buttonOfUnsubscribe.setDisable(true);
        buttonOfFetch.setDisable(true);
        buttonOfPublish.setDisable(true);

        VBox content = new VBox();
        content.setSpacing(8);
        content.getChildren().addAll(
                boxOfServer,
                new HBox(buttonOfConnect, buttonOfDisconnect),
                new VBox(labelOfManagementTopic, fieldOfManagementTopic),
                new HBox(buttonOfSubscribe, buttonOfUnsubscribe, buttonOfFetch),
                boxOfMessage,
                new VBox(buttonOfPublish),
                new VBox(labelOfLogs, textAreaOfLogs)
        );

        clientTab = new Tab("Client");
        clientTab.setClosable(false);
        clientTab.setContent(content);
        clientTab.setOnSelectionChanged(event -> {
            if (clientTab.isSelected()) logs = textAreaOfLogs;
        });

        return clientTab;
    }

    public void setupLogs() {
        PrintStream printStream = new PrintStream(new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                Platform.runLater(() -> log(logs, String.valueOf((char) b)));
            }
        });

        System.setOut(printStream);
        System.setErr(printStream);
    }

    public void log(TextArea field, String text) {
        field.appendText(text);
    }
}
